/**
 * This class is responsible for the game sound effetc
 * (not music). The effects are generated by an audio
 * context. The audio context is a limited resource on
 * browsers so a Singleton Pattern is implemented in
 * order to reuse the same AudioContext.
 */

 /**
  * The code is imported globally.
  */
; (global => {
    class SoundManager {

        /**
         * The cosntructor admits some configuration,
         * but it also has default values if values are
         * not passed.
         * 
         * @param {String} type  Sound wave type.
         * @param {float} volume Gain of the oscillator.
         */
        constructor(type = "triangle", volume = 0.5) {
            this.type = type;
            this.volume = volume;
        }

        /**
         * Singleton Pattern implementation. If an AudioContext
         * is already created, use it instead of creating a new one.
         */
        getAudioContext() {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext);
        }

        /**
         * Set all values needed to generate a tone, then, plays it.
         * A frquency must be passed, the values corresponds to a
         * musical note. In this case, the shoots and the hits has the
         * same note but in differents octaves.
         * 
         * A5 (880)    when the player shoots.
         * A4 (440)    when the player gets hurt.
         * G5 (783.99) when the enemy shoots.
         * G4 (392)    when the enemy gets hurt.
         * 
         * @param {float} freq Value
         */
        playTone(freq) {

            /**
             * Check if there is an already created
             * AudioContext.
             */
            if (!this.audioContext) this.getAudioContext();

            /**
             * Creating a gain node and a oscillator.
             */
            const masterGainNode = this.audioContext.createGain();
            const osc = this.audioContext.createOscillator();

            /**
             * Connecting the context and gain node.
             */
            masterGainNode.connect(this.audioContext.destination);

            /**
             * Setting the volume.
             */
            masterGainNode.gain.value = this.volume;

            /**
             * Connecting the oscillator with the gain node.
             */
            osc.connect(masterGainNode);

            /**
             * Setting the note to play (frequency).
             */
            osc.frequency.value = freq;

            /**
             * Setting the sound wave type.
             */
            osc.type = this.type;

            /**
             * Make it sound and stoping it after 50 milliseconds.
             */
            osc.start();
            setTimeout(() => {
                osc.stop();
            }, 50);
        }
    }
    global.SoundManager = SoundManager;
})(window)